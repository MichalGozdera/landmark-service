openapi: 3.0.3
info:
  title: landmark area API
  description: landmark service
  version: "1.0"
paths:
  /administrative-areas/import-kml:
    post:
      summary: Import areas
      operationId: importAdministrativeAreas
      tags:
        - administrativeAreaImportExport
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/AdministrativeAreasImportRequest"
                geometry:
                  $ref: "#/components/schemas/Geometry"
      responses:
        "400":
          description: Bad Request
        "201":
          description: Created
  /administrative-areas/export-kml:
    get:
      summary: Export administrative areas geometries to KML by country and level
      operationId: exportAdministrativeAreasKml
      tags:
        - administrativeAreaImportExport
      parameters:
        - in: query
          name: countryName
          required: true
          schema:
            type: string
        - in: query
          name: levelName
          required: true
          schema:
            type: string
        - in: query
          name: fileName
          required: false
          schema:
            type: string
          description: Optional file name for the downloaded KML file
      responses:
        "200":
          description: KML file with geometries
          content:
            application/vnd.google-earth.kml+xml:
              schema:
                type: string
                format: binary
  /administrative-areas:
    post:
      summary: Create area
      operationId: createAdministrativeArea
      tags:
        - administrativeArea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/AdministrativeAreaRequest"
      responses:
        "400":
          description: Bad Request
        "201":
          description: Created
  /administrative-areas/{AdministrativeAreaId}:
    get:
      summary: display single administrative area
      operationId: loadAdministrativeArea
      tags:
        - administrativeArea
      parameters:
        - in: path
          name: AdministrativeAreaId
          required: true
          schema:
            type: AdministrativeAreaId
      responses:
        "400":
          description: Bad Request
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAreaResponse"
    put:
      summary: update single administrative area
      operationId: updateAdministrativeArea
      tags:
        - administrativeArea
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdministrativeAreaRequest"
        required: true
      parameters:
        - in: path
          name: AdministrativeAreaId
          required: true
          schema:
            type: AdministrativeAreaId
      responses:
        "400":
          description: Bad Request
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAreaResponse"
    delete:
      summary: delete single administrative area
      operationId: deleteAdministrativeArea
      tags:
        - administrativeArea
      parameters:
        - in: path
          name: AdministrativeAreaId
          required: true
          schema:
            type: AdministrativeAreaId
      responses:
        "400":
          description: Bad Request
        "204":
          description:
  /administrative-areas/by-level-country:
    get:
      summary: Get administrative areas by level and country name
      operationId: getAdministrativeAreasByLevelAndCountry
      tags:
        - administrativeArea
      parameters:
        - in: query
          name: levelName
          required: true
          schema:
            type: string
        - in: query
          name: countryName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of administrative areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdministrativeAreaResponse"
  /administrative-areas/by-metadata:
    get:
      summary: Get administrative areas by metadata query
      operationId: getAdministrativeAreasByMetadata
      tags:
        - administrativeArea
      parameters:
        - in: query
          name: metadataQuery
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of administrative areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdministrativeAreaResponse"
  /administrative-areas/{id}/simple:
    get:
      summary: display single administrative area (without geometry)
      operationId: loadAdministrativeAreaSimple
      tags:
        - administrativeAreaSimple
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "400":
          description: Bad Request
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAreaResponse"
  /administrative-areas/by-level-country/simple:
    get:
      summary: Get administrative areas by level and country name (simple, without geometry)
      operationId: getAdministrativeAreasByLevelAndCountrySimple
      tags:
        - administrativeAreaSimple
      parameters:
        - in: query
          name: levelName
          required: true
          schema:
            type: string
        - in: query
          name: countryName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of administrative areas (without geometry)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdministrativeAreaResponse"

  /administrative-areas/by-metadata/simple:
    get:
      summary: Get administrative areas by metadata query (simple, without geometry)
      operationId: getAdministrativeAreasByMetadataSimple
      tags:
        - administrativeAreaSimple
      parameters:
        - in: query
          name: metadataQuery
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of administrative areas (without geometry)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdministrativeAreaResponse"
  /administrative-levels:
    post:
      summary: Create level
      operationId: createAdministrativeLevel
      tags:
        - administrativeLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdministrativeLevel"
        required: true
      responses:
        "400":
          description: Bad Request
        "201":
          description: Created
  /administrative-levels/{AdministrativeLevelId}:
    get:
      summary: display single administrative level
      operationId: loadAdministrativeLevel
      tags:
        - administrativeLevel
      parameters:
        - in: path
          name: AdministrativeLevelId
          required: true
          schema:
            type: AdministrativeLevelId
      responses:
        "400":
          description: Bad Request
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeLevel"
    put:
      summary: update single administrative level
      operationId: updateAdministrativeLevel
      tags:
        - administrativeLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdministrativeLevel"
        required: true
      parameters:
        - in: path
          name: AdministrativeLevelId
          required: true
          schema:
            type: AdministrativeLevelId
      responses:
        "400":
          description: Bad Request
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeLevel"
    delete:
      summary: delete single administrative level
      operationId: deleteAdministrativeLevel
      tags:
        - administrativeLevel
      parameters:
        - in: path
          name: AdministrativeLevelId
          required: true
          schema:
            type: AdministrativeLevelId
      responses:
        "400":
          description: Bad Request
        "204":
          description: OK
  /countries:
    get:
      summary: fetch countries
      operationId: getCountries
      tags:
        - country
      responses:
        '200':
          description: list of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
    post:
      summary: add country
      operationId: createCountry
      tags:
        - country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryRequest'
      responses:
        '201':
          description: country created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
  /countries/{id}:
    get:
      summary: fetch country by ID
      operationId: getCountryById
      tags:
        - country
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: country desccription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        '404':
          description: country not found
    delete:
      summary: delete country
      operationId: deleteCountry
      tags:
        - country
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: country deleted
components:
  schemas:
    AdministrativeAreasImportRequest:
      type: object
      required:
        - level
      properties:
        level:
          $ref: "#/components/schemas/AdministrativeLevelBasic"
        metadata:
          $ref: "#/components/schemas/LandmarkMetadata"
    AdministrativeAreaRequest:
      type: object
      required:
        - name
        - level
      properties:
        name:
          type: LandmarkName
        level:
          $ref: "#/components/schemas/AdministrativeLevelBasic"
        geometry:
          type: string
        metadata:
          $ref: "#/components/schemas/LandmarkMetadata"
    AdministrativeAreaResponse:
      type: object
      required:
        - name
      properties:
        id:
          type: AdministrativeAreaId
        name:
          type: LandmarkName
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        level:
          $ref: "#/components/schemas/AdministrativeLevel"
        parent:
          type: AdministrativeAreaId
        geometry:
          type: string
        metadata:
          $ref: "#/components/schemas/LandmarkMetadata"
    AdministrativeLevelBasic:
      type: object
      required:
        - country
        - name
      properties:
        name:
          type: LevelName
        country:
          type: CountryName
    AdministrativeLevel:
      type: object
      required:
        - order
        - country
        - name
      properties:
        id:
          type: AdministrativeLevelId
        name:
          type: LevelName
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        country:
          type: CountryName
        order:
          type: LevelOrder
    AdministrativeAreaId:
      type: integer
    AdministrativeLevelId:
      type: integer
    CountryId:
      type: integer
    LandmarkName:
      type: string
    LevelName:
      type: string
    CountryName:
      type: string
    LevelOrder:
      type: integer
      format: int32
    Geometry:
      type: string
      format: binary
    Country:
      type: object
      properties:
        id:
          type: CountryId
        name:
          type: string
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
    CountryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    LandmarkMetadata:
      type: object
    AdministrativeAreaEvent:
      type: object
      properties:
        area:
          $ref: "#/components/schemas/AdministrativeAreaEventArea"
        createdAt:
          type: string
          format: date-time
        operationType:
          type: string
    AdministrativeAreaEventArea:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        level:
          $ref: "#/components/schemas/AdministrativeLevel"
        geometry:
          type: array
          items:
            type: string
        metadata:
          type: object
        parent:
          type: integer
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
