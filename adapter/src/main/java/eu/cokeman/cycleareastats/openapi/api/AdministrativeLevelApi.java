/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.cokeman.cycleareastats.openapi.api;

import eu.cokeman.cycleareastats.openapi.model.AdministrativeLevelDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "administrativeLevel", description = "the administrativeLevel API")
public interface AdministrativeLevelApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /administrative-levels : Create level
     *
     * @param administrativeLevelDto  (required)
     * @return Bad Request (status code 400)
     *         or Created (status code 201)
     */
    @Operation(
        operationId = "createAdministrativeLevel",
        summary = "Create level",
        tags = { "administrativeLevel" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/administrative-levels",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createAdministrativeLevel(
        @Parameter(name = "AdministrativeLevelDto", description = "", required = true) @Valid @RequestBody AdministrativeLevelDto administrativeLevelDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /administrative-levels/{AdministrativeLevelId} : delete single administrative level
     *
     * @param administrativeLevelId  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 204)
     */
    @Operation(
        operationId = "deleteAdministrativeLevel",
        summary = "delete single administrative level",
        tags = { "administrativeLevel" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "204", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeLevelDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/administrative-levels/{AdministrativeLevelId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AdministrativeLevelDto> deleteAdministrativeLevel(
        @Parameter(name = "AdministrativeLevelId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeLevelId") String administrativeLevelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /administrative-levels/{AdministrativeLevelId} : display single administrative level
     *
     * @param administrativeLevelId  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "loadAdministrativeLevel",
        summary = "display single administrative level",
        tags = { "administrativeLevel" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeLevelDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/administrative-levels/{AdministrativeLevelId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AdministrativeLevelDto> loadAdministrativeLevel(
        @Parameter(name = "AdministrativeLevelId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeLevelId") String administrativeLevelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /administrative-levels/{AdministrativeLevelId} : update single administrative level
     *
     * @param administrativeLevelId  (required)
     * @param administrativeLevelDto  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "updateAdministrativeLevel",
        summary = "update single administrative level",
        tags = { "administrativeLevel" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeLevelDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/administrative-levels/{AdministrativeLevelId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AdministrativeLevelDto> updateAdministrativeLevel(
        @Parameter(name = "AdministrativeLevelId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeLevelId") String administrativeLevelId,
        @Parameter(name = "AdministrativeLevelDto", description = "", required = true) @Valid @RequestBody AdministrativeLevelDto administrativeLevelDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
