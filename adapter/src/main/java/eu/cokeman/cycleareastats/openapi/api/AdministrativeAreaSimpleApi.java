/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.cokeman.cycleareastats.openapi.api;

import eu.cokeman.cycleareastats.openapi.model.AdministrativeAreaResponseDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "administrativeAreaSimple", description = "the administrativeAreaSimple API")
public interface AdministrativeAreaSimpleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /administrative-areas/by-level-country/simple : Get administrative areas by level and country name (simple, without geometry)
     *
     * @param levelName  (required)
     * @param countryName  (required)
     * @return List of administrative areas (without geometry) (status code 200)
     */
    @Operation(
        operationId = "getAdministrativeAreasByLevelAndCountrySimple",
        summary = "Get administrative areas by level and country name (simple, without geometry)",
        tags = { "administrativeAreaSimple" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of administrative areas (without geometry)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdministrativeAreaResponseDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/administrative-areas/by-level-country/simple",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AdministrativeAreaResponseDto>> getAdministrativeAreasByLevelAndCountrySimple(
        @NotNull @Parameter(name = "levelName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "levelName", required = true) String levelName,
        @NotNull @Parameter(name = "countryName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryName", required = true) String countryName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }, { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /administrative-areas/by-metadata/simple : Get administrative areas by metadata query (simple, without geometry)
     *
     * @param metadataQuery  (required)
     * @return List of administrative areas (without geometry) (status code 200)
     */
    @Operation(
        operationId = "getAdministrativeAreasByMetadataSimple",
        summary = "Get administrative areas by metadata query (simple, without geometry)",
        tags = { "administrativeAreaSimple" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of administrative areas (without geometry)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdministrativeAreaResponseDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/administrative-areas/by-metadata/simple",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AdministrativeAreaResponseDto>> getAdministrativeAreasByMetadataSimple(
        @NotNull @Parameter(name = "metadataQuery", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "metadataQuery", required = true) String metadataQuery
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }, { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /administrative-areas/{id}/simple : display single administrative area (without geometry)
     *
     * @param id  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "loadAdministrativeAreaSimple",
        summary = "display single administrative area (without geometry)",
        tags = { "administrativeAreaSimple" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeAreaResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/administrative-areas/{id}/simple",
        produces = { "application/json" }
    )
    default ResponseEntity<AdministrativeAreaResponseDto> loadAdministrativeAreaSimple(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
