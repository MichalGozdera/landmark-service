/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package eu.cokeman.cycleareastats.openapi.api;

import eu.cokeman.cycleareastats.openapi.model.AdministrativeAreaRequestDto;
import eu.cokeman.cycleareastats.openapi.model.AdministrativeAreaResponseDto;
import eu.cokeman.cycleareastats.openapi.model.CreateAdministrativeAreaRequestDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "administrativeArea", description = "the administrativeArea API")
public interface AdministrativeAreaApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /administrative-areas : Create area
   *
   * @param createAdministrativeAreaRequestDto (optional)
   * @return Bad Request (status code 400) or Created (status code 201)
   */
  @Operation(
      operationId = "createAdministrativeArea",
      summary = "Create area",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        @ApiResponse(responseCode = "201", description = "Created")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/administrative-areas",
      consumes = {"application/json"})
  default ResponseEntity<Void> createAdministrativeArea(
      @Parameter(name = "CreateAdministrativeAreaRequestDto", description = "")
          @Valid
          @RequestBody(required = false)
          CreateAdministrativeAreaRequestDto createAdministrativeAreaRequestDto) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /administrative-areas/{AdministrativeAreaId} : delete single administrative area
   *
   * @param administrativeAreaId (required)
   * @return Bad Request (status code 400) or (status code 204)
   */
  @Operation(
      operationId = "deleteAdministrativeArea",
      summary = "delete single administrative area",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        @ApiResponse(responseCode = "204", description = "")
      })
  @RequestMapping(
      method = RequestMethod.DELETE,
      value = "/administrative-areas/{AdministrativeAreaId}")
  default ResponseEntity<Void> deleteAdministrativeArea(
      @Parameter(
              name = "AdministrativeAreaId",
              description = "",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("AdministrativeAreaId")
          Integer administrativeAreaId) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /administrative-areas/by-level-country : Get administrative areas by level and country name
   *
   * @param levelName (required)
   * @param countryName (required)
   * @return List of administrative areas (status code 200)
   */
  @Operation(
      operationId = "getAdministrativeAreasByLevelAndCountry",
      summary = "Get administrative areas by level and country name",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "List of administrative areas",
            content = {
              @Content(
                  mediaType = "application/json",
                  array =
                      @ArraySchema(
                          schema = @Schema(implementation = AdministrativeAreaResponseDto.class)))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/administrative-areas/by-level-country",
      produces = {"application/json"})
  default ResponseEntity<List<AdministrativeAreaResponseDto>>
      getAdministrativeAreasByLevelAndCountry(
          @NotNull
              @Parameter(
                  name = "levelName",
                  description = "",
                  required = true,
                  in = ParameterIn.QUERY)
              @Valid
              @RequestParam(value = "levelName", required = true)
              String levelName,
          @NotNull
              @Parameter(
                  name = "countryName",
                  description = "",
                  required = true,
                  in = ParameterIn.QUERY)
              @Valid
              @RequestParam(value = "countryName", required = true)
              String countryName) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "[ { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }, { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" } ]";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /administrative-areas/by-metadata : Get administrative areas by metadata query
   *
   * @param metadataQuery (required)
   * @return List of administrative areas (status code 200)
   */
  @Operation(
      operationId = "getAdministrativeAreasByMetadata",
      summary = "Get administrative areas by metadata query",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "List of administrative areas",
            content = {
              @Content(
                  mediaType = "application/json",
                  array =
                      @ArraySchema(
                          schema = @Schema(implementation = AdministrativeAreaResponseDto.class)))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/administrative-areas/by-metadata",
      produces = {"application/json"})
  default ResponseEntity<List<AdministrativeAreaResponseDto>> getAdministrativeAreasByMetadata(
      @NotNull
          @Parameter(
              name = "metadataQuery",
              description = "",
              required = true,
              in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "metadataQuery", required = true)
          String metadataQuery) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "[ { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }, { \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" } ]";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /administrative-areas/{AdministrativeAreaId} : display single administrative area
   *
   * @param administrativeAreaId (required)
   * @return Bad Request (status code 400) or OK (status code 200)
   */
  @Operation(
      operationId = "loadAdministrativeArea",
      summary = "display single administrative area",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        @ApiResponse(
            responseCode = "200",
            description = "OK",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = AdministrativeAreaResponseDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/administrative-areas/{AdministrativeAreaId}",
      produces = {"application/json"})
  default ResponseEntity<AdministrativeAreaResponseDto> loadAdministrativeArea(
      @Parameter(
              name = "AdministrativeAreaId",
              description = "",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("AdministrativeAreaId")
          Integer administrativeAreaId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PUT /administrative-areas/{AdministrativeAreaId} : update single administrative area
   *
   * @param administrativeAreaId (required)
   * @param administrativeAreaRequestDto (required)
   * @return Bad Request (status code 400) or OK (status code 200)
   */
  @Operation(
      operationId = "updateAdministrativeArea",
      summary = "update single administrative area",
      tags = {"administrativeArea"},
      responses = {
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        @ApiResponse(
            responseCode = "200",
            description = "OK",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = AdministrativeAreaResponseDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.PUT,
      value = "/administrative-areas/{AdministrativeAreaId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<AdministrativeAreaResponseDto> updateAdministrativeArea(
      @Parameter(
              name = "AdministrativeAreaId",
              description = "",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("AdministrativeAreaId")
          Integer administrativeAreaId,
      @Parameter(name = "AdministrativeAreaRequestDto", description = "", required = true)
          @Valid
          @RequestBody
          AdministrativeAreaRequestDto administrativeAreaRequestDto) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"parent\" : \"\", \"metadata\" : \"{}\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"geometry\", \"id\" : \"\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
