/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.cokeman.cycleareastats.openapi.api;

import eu.cokeman.cycleareastats.openapi.model.AdministrativeAreaDto;
import eu.cokeman.cycleareastats.openapi.model.AdministrativeLevelDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "administrativeArea", description = "the administrativeArea API")
public interface AdministrativeAreaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /administrative-areas/{AdministrativeAreaId} : delete single administrative area
     *
     * @param administrativeAreaId  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 204)
     */
    @Operation(
        operationId = "deleteAdministrativeArea",
        summary = "delete single administrative area",
        tags = { "administrativeArea" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "204", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/administrative-areas/{AdministrativeAreaId}"
    )
    default ResponseEntity<Void> deleteAdministrativeArea(
        @Parameter(name = "AdministrativeAreaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeAreaId") Integer administrativeAreaId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /administrative-areas : Import areas
     *
     * @param level  (optional)
     * @param geometry  (optional)
     * @return Bad Request (status code 400)
     *         or Created (status code 201)
     */
    @Operation(
        operationId = "importAdministrativeAreas",
        summary = "Import areas",
        tags = { "administrativeArea" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/administrative-areas",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> importAdministrativeAreas(
        @Parameter(name = "level", description = "") @Valid @RequestPart(value = "level", required = false) AdministrativeLevelDto level,
        @Parameter(name = "geometry", description = "") @RequestPart(value = "geometry", required = false) MultipartFile geometry
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /administrative-areas/{AdministrativeAreaId} : display single administrative area
     *
     * @param administrativeAreaId  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "loadAdministrativeArea",
        summary = "display single administrative area",
        tags = { "administrativeArea" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeAreaDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/administrative-areas/{AdministrativeAreaId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AdministrativeAreaDto> loadAdministrativeArea(
        @Parameter(name = "AdministrativeAreaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeAreaId") Integer administrativeAreaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"parent\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"\", \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /administrative-areas/{AdministrativeAreaId} : update single administrative area
     *
     * @param administrativeAreaId  (required)
     * @param administrativeAreaDto  (required)
     * @return Bad Request (status code 400)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "updateAdministrativeArea",
        summary = "update single administrative area",
        tags = { "administrativeArea" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdministrativeAreaDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/administrative-areas/{AdministrativeAreaId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AdministrativeAreaDto> updateAdministrativeArea(
        @Parameter(name = "AdministrativeAreaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("AdministrativeAreaId") Integer administrativeAreaId,
        @Parameter(name = "AdministrativeAreaDto", description = "", required = true) @Valid @RequestBody AdministrativeAreaDto administrativeAreaDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"parent\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"level\" : { \"country\" : \"\", \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"\", \"order\" : \"\" }, \"name\" : \"\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"geometry\" : \"\", \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
